[Task 12]
Step 1: The PCAP summary indicates a TCP conversation between two IP addresses on ports 56886 and 4506. The next step is to identify the service or application involved in this communication. Port 4506 is commonly associated with SaltStack, a configuration management tool. However, to confirm the presence of SaltStack or any other service, I need to extract more detailed information from the PCAP file, such as protocol details or specific application data.

Let's proceed by extracting the application layer protocol details from the PCAP file to confirm the service or application involved.
Step 2: Final report from the forensic expert:
The analysis of the PCAP file for traffic on port 4506 did not reveal any recognizable application layer protocol or service. The payload data extracted was in a binary or encoded format, and no known protocols or services associated with port 4506 were found in the tshark manuals. It is possible that the service or application involved is using a custom or less common protocol.
Executed command: -Y "tcp.port == 4506" -T fields -e data

Command output: 


ff00000000000000017f

ff00000000000000017f

03

03
014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000

04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02

0100000a81a3636d64a470696e67
0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
0100000180





Step 3: The extracted payload data from the PCAP file appears to be in a binary or encoded format, and no recognizable application layer protocol or service was identified. The data includes sequences like "ff00000000000000017f" and "04290552454144590b536f636b65742d5479706500000006524f555445520849646e7469747900000000", which might be indicative of a custom protocol or application-specific data.

To proceed, I need to analyze the payload data further to identify any patterns or signatures that might be associated with known vulnerabilities or exploits. This could help in identifying the relevant CVE.

Let's proceed by searching for any known vulnerabilities or CVEs associated with SaltStack or similar services that might use custom protocols or encoded data.
Step 4: Search result for query: 'SaltStack CVE vulnerabilities custom protocol'
Information 1: Saltstack CVEs and Security Vulnerabilities - OpenCVE Vulnerabilities (Saltstack) Sign in Register MAIN NAVIGATION Vulnerabilities Vendors & Products Weaknesses Statistics Search Search Toggle Dropdown Query Builder Save Query Load Query Use the Query Builder to create your own search query, or check out the documentation to learn the search syntax. Search Examples Crit. Microsoft High Apache SQL Injection (CWE-89) Linux Kernel High (CVSS 3.1) Apache Struts RCE (Remote Code Execution) XSS (CWE-79) Critical 
Information 2: SaltStack authorization bypass | WithSecure™ Labs JavaScript is disabled in your web browser For full functionality of this site it is necessary to enable JavaScript. Instructions how to enable JavaScript in your web browser. Careers Research Expertise Tools Advisories Contact Us SaltStack authorization bypass CVE-2020-11651, CVE-2020-11652 Share Type RCE Severity High Affected products SaltStack Salt CVE Reference CVE-2020-11651 CVE-2020-11652 Read more Timeline 2020-03-12The GPG key for the SaltStack secu
Information 3: SaltStack Advisory (Vulnerability, Impact, Remediation) Skip to content Use CasesAutomated Penetration TestingPenetration Testing as a Service (PTaaS)NextGen External Attack Surface ManagementContinuous Automated Red Teaming (CART)Cyber Security Supply Chain And 3rd Party Risk ManagementContinuous Threat Exposure Management (CTEM)TechnologyAgentic AI PlatformAboutMeet The TeamCareerContact UsPartnerResourcesResourcesBlogEventsPressPress KitRequest DemoX This blog was authored by Jitendra Chauhan, Head R&D, 
Information 4: SaltStack Salt Critical Vulnerabilities Under Active Exploitation Skip to content Blog HomeTopics All Articles Security Research and Intelligence Endpoint Security and Management Vulnerability Management Patch Management Endpoint Security Endpoint Management IT Asset Management Regulatory Compliance Threat Detection and Response Product Releases Technology and Trends Artificial Intelligence Computer Engineering COVID-19 Cyber Hygiene Framework Remote Work Security Automation SecPod Culture From CEO’s Desk M
Information 5: ls Advisories Contact Us SaltStack authorization bypass CVE-2020-11651, CVE-2020-11652 Share Type RCE Severity High Affected products SaltStack Salt CVE Reference CVE-2020-11651 CVE-2020-11652 Read more Timeline 2020-03-12The GPG key for the SaltStack security team published on saltstack.com had expired in 2018 and a request for an updated key was sent.2020-03-16Repeated request for an updated GPG key resulted in publication of a re-signed key to the security contact page. Full vulnerability report sent to 
Step 5: The search results indicate that there are known vulnerabilities associated with SaltStack, specifically CVE-2020-11651 and CVE-2020-11652, which involve authorization bypass and remote code execution (RCE). Given the context of the PCAP file and the potential use of a custom protocol, these CVEs might be relevant to the analysis.

Next, I need to gather evidence of malicious activities associated with these CVEs from the PCAP file. This involves looking for signs of unauthorized access or remote code execution attempts.

Let's proceed by analyzing the PCAP file for any signs of unauthorized access or remote code execution attempts that might be associated with these CVEs.
Step 6: Final report from the forensic expert:
The analysis focused on examining the traffic on port 4506 for signs of unauthorized access or remote code execution attempts. The initial inspection of packet details revealed various payloads exchanged between the two IP addresses. Attempts to decode these payloads using tshark's `-e data.text` and `-e data` fields did not yield human-readable content. The hexadecimal payloads were extracted, but converting them to ASCII within tshark was not feasible. Further analysis of the raw data using external tools is recommended to decode the payloads and identify any suspicious commands or data.
Executed command: -Y "tcp.port == 4506" -T fields -e frame.number -e ip.src -e ip.dst -e data

Command output: 5	172.18.0.1	172.18.0.2	
6	172.18.0.2	172.18.0.1	
7	172.18.0.1	172.18.0.2	
8	172.18.0.1	172.18.0.2	ff00000000000000017f
9	172.18.0.2	172.18.0.1	
10	172.18.0.2	172.18.0.1	ff00000000000000017f
11	172.18.0.1	172.18.0.2	
12	172.18.0.2	172.18.0.1	03
13	172.18.0.1	172.18.0.2	
14	172.18.0.1	172.18.0.2	03
15	172.18.0.1	172.18.0.2	014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
16	172.18.0.2	172.18.0.1	
17	172.18.0.2	172.18.0.1	004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
18	172.18.0.2	172.18.0.1	04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000
19	172.18.0.1	172.18.0.2	
20	172.18.0.1	172.18.0.2	04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
21	172.18.0.1	172.18.0.2	0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02
22	172.18.0.2	172.18.0.1	
23	172.18.0.2	172.18.0.1	0100000a81a3636d64a470696e67
24	172.18.0.1	172.18.0.2	0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
25	172.18.0.2	172.18.0.1	0100000180
26	172.18.0.1	172.18.0.2	
27	172.18.0.2	172.18.0.1	
28	172.18.0.1	172.18.0.2	


Step 7: 
Step 8: Final report from the forensic expert:
The analysis focused on extracting command-like patterns or suspicious sequences from the payload data in the PCAP file. Initially, attempts to extract text data using the `data.text` field resulted in no output, indicating the payload might not be in plain text format. Subsequently, the `data` field was used to extract raw payload data, revealing a mix of hexadecimal values and some ASCII text. Attempts to decode the hexadecimal data using shell pipes were unsuccessful due to command execution errors. Further attempts to extract ASCII text using the `text` field resulted in repeated 'Timestamps' entries, which were not meaningful. Finally, the `data` field was used again to manually inspect the output for ASCII sequences. The extracted data contained ASCII text like 'SOCKET-Type', 'ROUTER', 'Identity', and 'READ', suggesting potential command-like patterns related to network communication or configuration. However, no definitive unauthorized access or remote code execution attempts were identified from the available data.
Executed command: -Y "tcp.stream eq 0" -T fields -e data

Command output: 


ff00000000000000017f

ff00000000000000017f

03

03
014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000

04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02

0100000a81a3636d64a470696e67
0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
0100000180





Step 9: 
Step 10: Final report from the forensic expert:
The analysis of the payload data extracted from the TCP stream revealed several command-like patterns and suspicious sequences. Recognizable patterns such as 'READ', 'ROUTER', 'Identity', 'cmd', 'ping', and 'version' were identified in the hexadecimal data. These patterns suggest potential command-like sequences that could indicate unauthorized access or remote code execution attempts.
Executed command: -Y "tcp" -T fields -e data

Command output: 


ff00000000000000017f

ff00000000000000017f

03

03
014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000

04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02

0100000a81a3636d64a470696e67
0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
0100000180





Step 11: 
Step 12: Final report from the forensic expert:
The attempt to extract ASCII data from the payload using the '-e data.text' field did not yield any output, indicating that the payload data might not contain ASCII-encoded text or the field used was incorrect. Despite consulting the tshark manual, no alternative field was identified for extracting ASCII text. Therefore, the analysis could not identify any command-like patterns or suspicious sequences from the payload data in the PCAP file.
Executed command: -Y "tcp.stream eq 0" -T fields -e data.text

Command output: No output found for the given command.

Step 13: The analysis of the PCAP file has revealed potential command-like patterns in the payload data, such as 'READ', 'ROUTER', 'Identity', 'cmd', 'ping', and 'version'. These patterns suggest possible unauthorized access or remote code execution attempts, which align with the known vulnerabilities CVE-2020-11651 and CVE-2020-11652 associated with SaltStack. However, the analysis did not definitively identify any unauthorized access or remote code execution attempts from the available data.

To proceed, I need to determine whether the service is vulnerable to the identified CVEs and if the attack was successful. This requires evaluating the context of the communication and any potential responses that indicate successful exploitation.

Let's proceed by evaluating the context of the communication and any potential responses that indicate successful exploitation.
Step 14: Final report from the forensic expert:
The analysis focused on extracting ASCII strings from the packet data to identify any response codes or messages indicating successful exploitation or unauthorized access. However, attempts to extract ASCII strings using the `-T fields -e data.text` option did not yield any results. Further attempts to find a suitable field name for ASCII extraction in the tshark manual were unsuccessful. Therefore, no specific response codes or messages indicating exploitation or unauthorized access were found in the provided PCAP file.
Executed command: -T fields -e data.text

Command output: No output found for the given command.

Step 15: The analysis of the PCAP file has revealed potential command-like patterns in the payload data, such as 'READ', 'ROUTER', 'Identity', 'cmd', 'ping', and 'version'. These patterns suggest possible unauthorized access or remote code execution attempts, which align with the known vulnerabilities CVE-2020-11651 and CVE-2020-11652 associated with SaltStack. However, the analysis did not definitively identify any unauthorized access or remote code execution attempts from the available data.

To proceed, I need to determine whether the service is vulnerable to the identified CVEs and if the attack was successful. This requires evaluating the context of the communication and any potential responses that indicate successful exploitation.

Let's proceed by evaluating the context of the communication and any potential responses that indicate successful exploitation.
Step 16: Final report from the forensic expert:
The analysis focused on extracting response codes or messages from a TCP stream on port 4506, which is often associated with SaltStack. The command used to follow the TCP stream in ASCII format did not yield any clear textual response codes or messages indicating successful exploitation or unauthorized access. The output was mostly non-readable characters with some command references like 'cmd.ping' and 'cmd._prep_auth_info'. Despite attempts to search for specific SaltStack-related fields or response codes in the tshark manual, no relevant information was found. Therefore, no conclusive evidence of successful exploitation or unauthorized access was identified in the provided PCAP file.
Executed command: -z follow,tcp,ascii,0

Command output:     1   0.000000   172.18.0.1 â†’ 224.0.0.251  MDNS 87 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
    2   2.372549 fe80::42:4dff:fed3:a853 â†’ ff02::fb     MDNS 107 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
    3   5.575285 02:42:4d:d3:a8:53 â†’ Broadcast    ARP 42 Who has 172.18.0.2? Tell 172.18.0.1
    4   5.575354 02:42:ac:12:00:02 â†’ 02:42:4d:d3:a8:53 ARP 42 172.18.0.2 is at 02:42:ac:12:00:02
    5   5.575503   172.18.0.1 â†’ 172.18.0.2   TCP 74 56886 â†’ 4506 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 SACK_PERM TSval=1572197063 TSecr=0 WS=128
    6   5.575615   172.18.0.2 â†’ 172.18.0.1   TCP 74 4506 â†’ 56886 [SYN, ACK] Seq=0 Ack=1 Win=65160 Len=0 MSS=1460 SACK_PERM TSval=461546381 TSecr=1572197063 WS=128
    7   5.575670   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=1 Ack=1 Win=64256 Len=0 TSval=1572197063 TSecr=461546381
    8   5.576372   172.18.0.1 â†’ 172.18.0.2   TCP 76 56886 â†’ 4506 [PSH, ACK] Seq=1 Ack=1 Win=64256 Len=10 TSval=1572197064 TSecr=461546381
    9   5.576510   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=1 Ack=11 Win=65152 Len=0 TSval=461546382 TSecr=1572197064
   10   5.576734   172.18.0.2 â†’ 172.18.0.1   TCP 76 4506 â†’ 56886 [PSH, ACK] Seq=1 Ack=11 Win=65152 Len=10 TSval=461546382 TSecr=1572197064
   11   5.576767   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=11 Ack=11 Win=64256 Len=0 TSval=1572197064 TSecr=461546382
   12   5.577431   172.18.0.2 â†’ 172.18.0.1   TCP 67 4506 â†’ 56886 [PSH, ACK] Seq=11 Ack=11 Win=65152 Len=1 TSval=461546383 TSecr=1572197064
   13   5.577467   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=11 Ack=12 Win=64256 Len=0 TSval=1572197065 TSecr=461546383
   14   5.578052   172.18.0.1 â†’ 172.18.0.2   TCP 67 56886 â†’ 4506 [PSH, ACK] Seq=11 Ack=12 Win=64256 Len=1 TSval=1572197065 TSecr=461546383
   15   5.578560   172.18.0.1 â†’ 172.18.0.2   TCP 119 56886 â†’ 4506 [PSH, ACK] Seq=12 Ack=12 Win=64256 Len=53 TSval=1572197066 TSecr=461546383
   16   5.579226   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=12 Ack=65 Win=65152 Len=0 TSval=461546385 TSecr=1572197065
   17   5.579347   172.18.0.2 â†’ 172.18.0.1   TCP 119 4506 â†’ 56886 [PSH, ACK] Seq=12 Ack=65 Win=65152 Len=53 TSval=461546385 TSecr=1572197065
   18   5.579648   172.18.0.2 â†’ 172.18.0.1   TCP 109 4506 â†’ 56886 [PSH, ACK] Seq=65 Ack=65 Win=65152 Len=43 TSval=461546385 TSecr=1572197065
   19   5.579998   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=65 Ack=108 Win=64256 Len=0 TSval=1572197067 TSecr=461546385
   20   5.580226   172.18.0.1 â†’ 172.18.0.2   TCP 106 56886 â†’ 4506 [PSH, ACK] Seq=65 Ack=108 Win=64256 Len=40 TSval=1572197068 TSecr=461546385
   21   5.580914   172.18.0.1 â†’ 172.18.0.2   TCP 105 56886 â†’ 4506 [PSH, ACK] Seq=105 Ack=108 Win=64256 Len=39 TSval=1572197068 TSecr=461546385
   22   5.581971   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=108 Ack=144 Win=65152 Len=0 TSval=461546387 TSecr=1572197068
   23   5.584722   172.18.0.2 â†’ 172.18.0.1   TCP 80 4506 â†’ 56886 [PSH, ACK] Seq=108 Ack=144 Win=65152 Len=14 TSval=461546390 TSecr=1572197068
   24   5.587504   172.18.0.1 â†’ 172.18.0.2   TCP 116 56886 â†’ 4506 [PSH, ACK] Seq=144 Ack=122 Win=64256 Len=50 TSval=1572197075 TSecr=461546390
   25   5.592054   172.18.0.2 â†’ 172.18.0.1   TCP 71 4506 â†’ 56886 [PSH, ACK] Seq=122 Ack=194 Win=65152 Len=5 TSval=461546397 TSecr=1572197075
   26   5.631523   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [FIN, ACK] Seq=194 Ack=127 Win=64256 Len=0 TSval=1572197119 TSecr=461546397
   27   5.631959   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [FIN, ACK] Seq=127 Ack=195 Win=65152 Len=0 TSval=461546437 TSecr=1572197119
   28   5.632000   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=195 Ack=128 Win=64256 Len=0 TSval=1572197119 TSecr=461546437
   29  10.717661 02:42:ac:12:00:02 â†’ 02:42:4d:d3:a8:53 ARP 42 Who has 172.18.0.1? Tell 172.18.0.2
   30  10.717712 02:42:4d:d3:a8:53 â†’ 02:42:ac:12:00:02 ARP 42 172.18.0.1 is at 02:42:4d:d3:a8:53
   31  64.004585   172.18.0.1 â†’ 224.0.0.251  MDNS 87 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
   32  66.375462 fe80::42:4dff:fed3:a853 â†’ ff02::fb     MDNS 107 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question

===================================================================
Follow: tcp,ascii
Filter: tcp.stream eq 0
Node 0: 172.18.0.1:56886
Node 1: 172.18.0.2:4506
10
..........
	10
..........
	1
.
1
.
53
.NULL................................................
	53
.NULL................................................
	43
.).READY.Socket-Type....ROUTER.Identity....
40
.&.READY.Socket-Type....REQ.Identity....
39
...#..enc.clear.load..cmd.ping.version.
	14
...
..cmd.ping
50
......enc.clear.load..cmd._prep_auth_info.version.
	5
.....
===================================================================


Step 17: The analysis of the PCAP file has revealed potential command-like patterns in the payload data, such as 'READ', 'ROUTER', 'Identity', 'cmd', 'ping', and 'version'. These patterns suggest possible unauthorized access or remote code execution attempts, which align with the known vulnerabilities CVE-2020-11651 and CVE-2020-11652 associated with SaltStack. However, the analysis did not definitively identify any unauthorized access or remote code execution attempts from the available data.

To proceed, I need to determine whether the service is vulnerable to the identified CVEs and if the attack was successful. This requires evaluating the context of the communication and any potential responses that indicate successful exploitation.

Let's proceed by evaluating the context of the communication and any potential responses that indicate successful exploitation.
Step 18: Final report from the forensic expert:
The analysis focused on extracting response codes or messages from the TCP stream on port 4506. Initial attempts to follow the TCP stream in ASCII format did not yield clear results due to a mix of binary and ASCII data. Further attempts to extract specific fields or decode the payload data also did not provide recognizable patterns or messages indicating successful exploitation or unauthorized access. The payload data extracted appeared to contain binary data and possibly encoded or compressed information, but no clear response codes or messages were identified.
Executed command: -Y "tcp.port == 4506" -T fields -e tcp.payload

Command output: 


ff00000000000000017f

ff00000000000000017f

03

03
014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000

04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02

0100000a81a3636d64a470696e67
0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
0100000180





Step 19: 
Step 20: Final report from the forensic expert:
The analysis involved extracting the TCP stream data in both ASCII and raw formats to identify any potential response codes or messages indicating successful exploitation or unauthorized access. The ASCII representation was not clear, and the raw data showed hexadecimal values, suggesting encoded or binary data. Attempts to find relevant fields or decoding methods within tshark were unsuccessful. Therefore, no specific response codes or messages could be identified from the provided data.
Executed command: -z follow,tcp,raw,0

Command output:     1   0.000000   172.18.0.1 â†’ 224.0.0.251  MDNS 87 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
    2   2.372549 fe80::42:4dff:fed3:a853 â†’ ff02::fb     MDNS 107 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
    3   5.575285 02:42:4d:d3:a8:53 â†’ Broadcast    ARP 42 Who has 172.18.0.2? Tell 172.18.0.1
    4   5.575354 02:42:ac:12:00:02 â†’ 02:42:4d:d3:a8:53 ARP 42 172.18.0.2 is at 02:42:ac:12:00:02
    5   5.575503   172.18.0.1 â†’ 172.18.0.2   TCP 74 56886 â†’ 4506 [SYN] Seq=0 Win=64240 Len=0 MSS=1460 SACK_PERM TSval=1572197063 TSecr=0 WS=128
    6   5.575615   172.18.0.2 â†’ 172.18.0.1   TCP 74 4506 â†’ 56886 [SYN, ACK] Seq=0 Ack=1 Win=65160 Len=0 MSS=1460 SACK_PERM TSval=461546381 TSecr=1572197063 WS=128
    7   5.575670   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=1 Ack=1 Win=64256 Len=0 TSval=1572197063 TSecr=461546381
    8   5.576372   172.18.0.1 â†’ 172.18.0.2   TCP 76 56886 â†’ 4506 [PSH, ACK] Seq=1 Ack=1 Win=64256 Len=10 TSval=1572197064 TSecr=461546381
    9   5.576510   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=1 Ack=11 Win=65152 Len=0 TSval=461546382 TSecr=1572197064
   10   5.576734   172.18.0.2 â†’ 172.18.0.1   TCP 76 4506 â†’ 56886 [PSH, ACK] Seq=1 Ack=11 Win=65152 Len=10 TSval=461546382 TSecr=1572197064
   11   5.576767   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=11 Ack=11 Win=64256 Len=0 TSval=1572197064 TSecr=461546382
   12   5.577431   172.18.0.2 â†’ 172.18.0.1   TCP 67 4506 â†’ 56886 [PSH, ACK] Seq=11 Ack=11 Win=65152 Len=1 TSval=461546383 TSecr=1572197064
   13   5.577467   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=11 Ack=12 Win=64256 Len=0 TSval=1572197065 TSecr=461546383
   14   5.578052   172.18.0.1 â†’ 172.18.0.2   TCP 67 56886 â†’ 4506 [PSH, ACK] Seq=11 Ack=12 Win=64256 Len=1 TSval=1572197065 TSecr=461546383
   15   5.578560   172.18.0.1 â†’ 172.18.0.2   TCP 119 56886 â†’ 4506 [PSH, ACK] Seq=12 Ack=12 Win=64256 Len=53 TSval=1572197066 TSecr=461546383
   16   5.579226   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=12 Ack=65 Win=65152 Len=0 TSval=461546385 TSecr=1572197065
   17   5.579347   172.18.0.2 â†’ 172.18.0.1   TCP 119 4506 â†’ 56886 [PSH, ACK] Seq=12 Ack=65 Win=65152 Len=53 TSval=461546385 TSecr=1572197065
   18   5.579648   172.18.0.2 â†’ 172.18.0.1   TCP 109 4506 â†’ 56886 [PSH, ACK] Seq=65 Ack=65 Win=65152 Len=43 TSval=461546385 TSecr=1572197065
   19   5.579998   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=65 Ack=108 Win=64256 Len=0 TSval=1572197067 TSecr=461546385
   20   5.580226   172.18.0.1 â†’ 172.18.0.2   TCP 106 56886 â†’ 4506 [PSH, ACK] Seq=65 Ack=108 Win=64256 Len=40 TSval=1572197068 TSecr=461546385
   21   5.580914   172.18.0.1 â†’ 172.18.0.2   TCP 105 56886 â†’ 4506 [PSH, ACK] Seq=105 Ack=108 Win=64256 Len=39 TSval=1572197068 TSecr=461546385
   22   5.581971   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [ACK] Seq=108 Ack=144 Win=65152 Len=0 TSval=461546387 TSecr=1572197068
   23   5.584722   172.18.0.2 â†’ 172.18.0.1   TCP 80 4506 â†’ 56886 [PSH, ACK] Seq=108 Ack=144 Win=65152 Len=14 TSval=461546390 TSecr=1572197068
   24   5.587504   172.18.0.1 â†’ 172.18.0.2   TCP 116 56886 â†’ 4506 [PSH, ACK] Seq=144 Ack=122 Win=64256 Len=50 TSval=1572197075 TSecr=461546390
   25   5.592054   172.18.0.2 â†’ 172.18.0.1   TCP 71 4506 â†’ 56886 [PSH, ACK] Seq=122 Ack=194 Win=65152 Len=5 TSval=461546397 TSecr=1572197075
   26   5.631523   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [FIN, ACK] Seq=194 Ack=127 Win=64256 Len=0 TSval=1572197119 TSecr=461546397
   27   5.631959   172.18.0.2 â†’ 172.18.0.1   TCP 66 4506 â†’ 56886 [FIN, ACK] Seq=127 Ack=195 Win=65152 Len=0 TSval=461546437 TSecr=1572197119
   28   5.632000   172.18.0.1 â†’ 172.18.0.2   TCP 66 56886 â†’ 4506 [ACK] Seq=195 Ack=128 Win=64256 Len=0 TSval=1572197119 TSecr=461546437
   29  10.717661 02:42:ac:12:00:02 â†’ 02:42:4d:d3:a8:53 ARP 42 Who has 172.18.0.1? Tell 172.18.0.2
   30  10.717712 02:42:4d:d3:a8:53 â†’ 02:42:ac:12:00:02 ARP 42 172.18.0.1 is at 02:42:4d:d3:a8:53
   31  64.004585   172.18.0.1 â†’ 224.0.0.251  MDNS 87 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question
   32  66.375462 fe80::42:4dff:fed3:a853 â†’ ff02::fb     MDNS 107 Standard query 0x0000 PTR _ipps._tcp.local, "QM" question PTR _ipp._tcp.local, "QM" question

===================================================================
Follow: tcp,raw
Filter: tcp.stream eq 0
Node 0: 172.18.0.1:56886
Node 1: 172.18.0.2:4506
ff00000000000000017f
	ff00000000000000017f
	03
03
014e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	004e554c4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	04290552454144590b536f636b65742d5479706500000006524f55544552084964656e7469747900000000
04260552454144590b536f636b65742d5479706500000003524551084964656e7469747900000000
0100002383a3656e63a5636c656172a46c6f616481a3636d64a470696e67a776657273696f6e02
	0100000a81a3636d64a470696e67
0100002e83a3656e63a5636c656172a46c6f616481a3636d64af5f707265705f617574685f696e666fa776657273696f6e02
	0100000180
===================================================================


Step 21: 
Step 22: Final report from the forensic expert:
The analysis focused on extracting potential response codes or messages from the TCP stream on port 4506. Initial attempts to follow the TCP stream in ASCII format revealed a mix of printable and non-printable characters, making it difficult to interpret. Further attempts to filter out non-printable characters and focus on the payload data using various tshark commands did not yield any output, suggesting that the payload might not contain any printable ASCII data or the approach might not have been correctly targeting the data. Despite multiple attempts, no readable payload data was extracted from the TCP stream on port 4506.
Executed command: -Y "tcp.port == 4506" -T fields -e data.text

Command output: No output found for the given command.

Step 23: 
Step 24: FINAL REPORT:
The analysis of the PCAP file revealed a TCP conversation on port 4506, which is commonly associated with SaltStack. The payload data extracted from the PCAP file contained command-like patterns such as 'READ', 'ROUTER', 'Identity', 'cmd', 'ping', and 'version'. These patterns suggest possible unauthorized access or remote code execution attempts, aligning with the known vulnerabilities CVE-2020-11651 and CVE-2020-11652 associated with SaltStack. However, the analysis did not definitively identify any unauthorized access or remote code execution attempts from the available data. Attempts to extract ASCII strings or response codes indicating successful exploitation were unsuccessful, and no specific response codes or messages indicating exploitation or unauthorized access were found. The service is potentially vulnerable to the identified CVEs, but the attack's success could not be confirmed due to the lack of clear evidence in the PCAP data.
REPORT SUMMARY:
Identified CVE: CVE-2020-11651
Affected Service: SaltStack
Is Service Vulnerable: True
Attack succeeded: False

